// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace BatchClientNS
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayByIdResult : global::System.IEquatable<GetDisplayByIdResult>, IGetDisplayByIdResult
    {
        public GetDisplayByIdResult(global::BatchClientNS.IGetDisplayById_Node? node)
        {
            Node = node;
        }

        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::BatchClientNS.IGetDisplayById_Node? Node { get; }

        public virtual global::System.Boolean Equals(GetDisplayByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Node is null && other.Node is null) || Node != null && Node.Equals(other.Node)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDisplayByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Node != null)
                {
                    hash ^= 397 * Node.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_Batch : global::System.IEquatable<GetDisplayById_Node_Batch>, IGetDisplayById_Node_Batch
    {
        public GetDisplayById_Node_Batch()
        {
        }

        public virtual global::System.Boolean Equals(GetDisplayById_Node_Batch? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDisplayById_Node_Batch)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_Display : global::System.IEquatable<GetDisplayById_Node_Display>, IGetDisplayById_Node_Display
    {
        public GetDisplayById_Node_Display()
        {
        }

        public virtual global::System.Boolean Equals(GetDisplayById_Node_Display? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDisplayById_Node_Display)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_DisplayType : global::System.IEquatable<GetDisplayById_Node_DisplayType>, IGetDisplayById_Node_DisplayType
    {
        public GetDisplayById_Node_DisplayType(global::System.String id)
        {
            Id = id;
        }

        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(GetDisplayById_Node_DisplayType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDisplayById_Node_DisplayType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_BaseEntity : global::System.IEquatable<GetDisplayById_Node_BaseEntity>, IGetDisplayById_Node_BaseEntity
    {
        public GetDisplayById_Node_BaseEntity()
        {
        }

        public virtual global::System.Boolean Equals(GetDisplayById_Node_BaseEntity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDisplayById_Node_BaseEntity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetDisplayByIdResult
    {
        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::BatchClientNS.IGetDisplayById_Node? Node { get; }
    }

    /// <summary>
    /// The node interface is implemented by entities that have a global unique identifier.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetDisplayById_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetDisplayById_Node_Batch : IGetDisplayById_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetDisplayById_Node_Display : IGetDisplayById_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetDisplayById_Node_DisplayType : IGetDisplayById_Node
    {
        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetDisplayById_Node_BaseEntity : IGetDisplayById_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchByIdResult : global::System.IEquatable<GetBatchByIdResult>, IGetBatchByIdResult
    {
        public GetBatchByIdResult(global::BatchClientNS.IGetBatchById_Node? node)
        {
            Node = node;
        }

        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::BatchClientNS.IGetBatchById_Node? Node { get; }

        public virtual global::System.Boolean Equals(GetBatchByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Node is null && other.Node is null) || Node != null && Node.Equals(other.Node)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBatchByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Node != null)
                {
                    hash ^= 397 * Node.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_Batch : global::System.IEquatable<GetBatchById_Node_Batch>, IGetBatchById_Node_Batch
    {
        public GetBatchById_Node_Batch(global::System.String id)
        {
            Id = id;
        }

        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(GetBatchById_Node_Batch? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBatchById_Node_Batch)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_Display : global::System.IEquatable<GetBatchById_Node_Display>, IGetBatchById_Node_Display
    {
        public GetBatchById_Node_Display()
        {
        }

        public virtual global::System.Boolean Equals(GetBatchById_Node_Display? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBatchById_Node_Display)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_DisplayType : global::System.IEquatable<GetBatchById_Node_DisplayType>, IGetBatchById_Node_DisplayType
    {
        public GetBatchById_Node_DisplayType()
        {
        }

        public virtual global::System.Boolean Equals(GetBatchById_Node_DisplayType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBatchById_Node_DisplayType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_BaseEntity : global::System.IEquatable<GetBatchById_Node_BaseEntity>, IGetBatchById_Node_BaseEntity
    {
        public GetBatchById_Node_BaseEntity()
        {
        }

        public virtual global::System.Boolean Equals(GetBatchById_Node_BaseEntity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBatchById_Node_BaseEntity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetBatchByIdResult
    {
        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::BatchClientNS.IGetBatchById_Node? Node { get; }
    }

    /// <summary>
    /// The node interface is implemented by entities that have a global unique identifier.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetBatchById_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetBatchById_Node_Batch : IGetBatchById_Node
    {
        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetBatchById_Node_Display : IGetBatchById_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetBatchById_Node_DisplayType : IGetBatchById_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetBatchById_Node_BaseEntity : IGetBatchById_Node
    {
    }

    /// <summary>
    /// Represents the operation service of the GetDisplayById GraphQL operation
    /// <code>
    /// query GetDisplayById($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Display {
    ///       id
    ///     }
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on BaseEntity {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDisplayByIdQueryDocument()
        {
        }

        public static GetDisplayByIdQueryDocument Instance { get; } = new GetDisplayByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x44,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x44,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x44,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x44,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x42,
            0x61,
            0x73,
            0x65,
            0x45,
            0x6e,
            0x74,
            0x69,
            0x74,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ece3531a7a9d822de0b9d99872eb0957");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDisplayById GraphQL operation
    /// <code>
    /// query GetDisplayById($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Display {
    ///       id
    ///     }
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on BaseEntity {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayByIdQuery : global::BatchClientNS.IGetDisplayByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDisplayByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetDisplayByIdQuery(global::StrawberryShake.IOperationExecutor<IGetDisplayByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        private GetDisplayByIdQuery(global::StrawberryShake.IOperationExecutor<IGetDisplayByIdResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter iDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _iDFormatter = iDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDisplayByIdResult);

        public global::BatchClientNS.IGetDisplayByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::BatchClientNS.GetDisplayByIdQuery(_operationExecutor, _configure.Add(configure), _iDFormatter);
        }

        public global::BatchClientNS.IGetDisplayByIdQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::BatchClientNS.IGetDisplayByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDisplayByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDisplayByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDisplayByIdQueryDocument.Instance.Hash.Value, name: "GetDisplayById", document: GetDisplayByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDisplayById GraphQL operation
    /// <code>
    /// query GetDisplayById($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Display {
    ///       id
    ///     }
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on BaseEntity {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetDisplayByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::BatchClientNS.IGetDisplayByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::BatchClientNS.IGetDisplayByIdQuery WithRequestUri(global::System.Uri requestUri);
        global::BatchClientNS.IGetDisplayByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDisplayByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDisplayByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetBatchById GraphQL operation
    /// <code>
    /// query GetBatchById($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Display {
    ///       id
    ///     }
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on BaseEntity {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetBatchByIdQueryDocument()
        {
        }

        public static GetBatchByIdQueryDocument Instance { get; } = new GetBatchByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x42,
            0x61,
            0x74,
            0x63,
            0x68,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x44,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x44,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x42,
            0x61,
            0x73,
            0x65,
            0x45,
            0x6e,
            0x74,
            0x69,
            0x74,
            0x79,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "11845600849b33236bae9b793d4a5105");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBatchById GraphQL operation
    /// <code>
    /// query GetBatchById($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Display {
    ///       id
    ///     }
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on BaseEntity {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchByIdQuery : global::BatchClientNS.IGetBatchByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetBatchByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetBatchByIdQuery(global::StrawberryShake.IOperationExecutor<IGetBatchByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        private GetBatchByIdQuery(global::StrawberryShake.IOperationExecutor<IGetBatchByIdResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter iDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _iDFormatter = iDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetBatchByIdResult);

        public global::BatchClientNS.IGetBatchByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::BatchClientNS.GetBatchByIdQuery(_operationExecutor, _configure.Add(configure), _iDFormatter);
        }

        public global::BatchClientNS.IGetBatchByIdQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::BatchClientNS.IGetBatchByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBatchByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBatchByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetBatchByIdQueryDocument.Instance.Hash.Value, name: "GetBatchById", document: GetBatchByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBatchById GraphQL operation
    /// <code>
    /// query GetBatchById($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Batch {
    ///       id
    ///     }
    ///     ... on Display {
    ///       id
    ///     }
    ///     ... on DisplayType {
    ///       id
    ///     }
    ///     ... on BaseEntity {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetBatchByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::BatchClientNS.IGetBatchByIdQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::BatchClientNS.IGetBatchByIdQuery WithRequestUri(global::System.Uri requestUri);
        global::BatchClientNS.IGetBatchByIdQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBatchByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBatchByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the BatchClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class BatchClient : global::BatchClientNS.IBatchClient
    {
        private readonly global::BatchClientNS.IGetDisplayByIdQuery _getDisplayById;
        private readonly global::BatchClientNS.IGetBatchByIdQuery _getBatchById;
        public BatchClient(global::BatchClientNS.IGetDisplayByIdQuery getDisplayById, global::BatchClientNS.IGetBatchByIdQuery getBatchById)
        {
            _getDisplayById = getDisplayById ?? throw new global::System.ArgumentNullException(nameof(getDisplayById));
            _getBatchById = getBatchById ?? throw new global::System.ArgumentNullException(nameof(getBatchById));
        }

        public static global::System.String ClientName => "BatchClient";
        public global::BatchClientNS.IGetDisplayByIdQuery GetDisplayById => _getDisplayById;
        public global::BatchClientNS.IGetBatchByIdQuery GetBatchById => _getBatchById;
    }

    /// <summary>
    /// Represents the BatchClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IBatchClient
    {
        global::BatchClientNS.IGetDisplayByIdQuery GetDisplayById { get; }

        global::BatchClientNS.IGetBatchByIdQuery GetBatchById { get; }
    }
}

namespace BatchClientNS.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class BatchEntity
    {
        public BatchEntity(global::System.String id = default !)
        {
            Id = id;
        }

        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class DisplayEntity
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class DisplayTypeEntity
    {
        public DisplayTypeEntity(global::System.String id = default !)
        {
            Id = id;
        }

        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class BaseEntityEntity
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.GetDisplayByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, GetDisplayById_Node_Batch> _getDisplayById_Node_BatchFromBatchEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, GetDisplayById_Node_Display> _getDisplayById_Node_DisplayFromDisplayEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, GetDisplayById_Node_DisplayType> _getDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, GetDisplayById_Node_BaseEntity> _getDisplayById_Node_BaseEntityFromBaseEntityEntityMapper;
        public GetDisplayByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, GetDisplayById_Node_Batch> getDisplayById_Node_BatchFromBatchEntityMapper, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, GetDisplayById_Node_Display> getDisplayById_Node_DisplayFromDisplayEntityMapper, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, GetDisplayById_Node_DisplayType> getDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, GetDisplayById_Node_BaseEntity> getDisplayById_Node_BaseEntityFromBaseEntityEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDisplayById_Node_BatchFromBatchEntityMapper = getDisplayById_Node_BatchFromBatchEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDisplayById_Node_BatchFromBatchEntityMapper));
            _getDisplayById_Node_DisplayFromDisplayEntityMapper = getDisplayById_Node_DisplayFromDisplayEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDisplayById_Node_DisplayFromDisplayEntityMapper));
            _getDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper = getDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper));
            _getDisplayById_Node_BaseEntityFromBaseEntityEntityMapper = getDisplayById_Node_BaseEntityFromBaseEntityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDisplayById_Node_BaseEntityFromBaseEntityEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BatchClientNS.IGetDisplayByIdResult);

        public GetDisplayByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDisplayByIdResultInfo info)
            {
                return new GetDisplayByIdResult(MapIGetDisplayById_Node(info.Node, snapshot));
            }

            throw new global::System.ArgumentException("GetDisplayByIdResultInfo expected.");
        }

        private global::BatchClientNS.IGetDisplayById_Node? MapIGetDisplayById_Node(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Batch", global::System.StringComparison.Ordinal))
            {
                return _getDisplayById_Node_BatchFromBatchEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.BatchEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Display", global::System.StringComparison.Ordinal))
            {
                return _getDisplayById_Node_DisplayFromDisplayEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.DisplayEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DisplayType", global::System.StringComparison.Ordinal))
            {
                return _getDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.DisplayTypeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BaseEntity", global::System.StringComparison.Ordinal))
            {
                return _getDisplayById_Node_BaseEntityFromBaseEntityEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.BaseEntityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDisplayByIdResultInfo(global::StrawberryShake.EntityId? node, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Node = node;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::StrawberryShake.EntityId? Node { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDisplayByIdResultInfo(Node, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.GetBatchByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, GetBatchById_Node_Batch> _getBatchById_Node_BatchFromBatchEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, GetBatchById_Node_Display> _getBatchById_Node_DisplayFromDisplayEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, GetBatchById_Node_DisplayType> _getBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, GetBatchById_Node_BaseEntity> _getBatchById_Node_BaseEntityFromBaseEntityEntityMapper;
        public GetBatchByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, GetBatchById_Node_Batch> getBatchById_Node_BatchFromBatchEntityMapper, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, GetBatchById_Node_Display> getBatchById_Node_DisplayFromDisplayEntityMapper, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, GetBatchById_Node_DisplayType> getBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper, global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, GetBatchById_Node_BaseEntity> getBatchById_Node_BaseEntityFromBaseEntityEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getBatchById_Node_BatchFromBatchEntityMapper = getBatchById_Node_BatchFromBatchEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBatchById_Node_BatchFromBatchEntityMapper));
            _getBatchById_Node_DisplayFromDisplayEntityMapper = getBatchById_Node_DisplayFromDisplayEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBatchById_Node_DisplayFromDisplayEntityMapper));
            _getBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper = getBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper));
            _getBatchById_Node_BaseEntityFromBaseEntityEntityMapper = getBatchById_Node_BaseEntityFromBaseEntityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBatchById_Node_BaseEntityFromBaseEntityEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::BatchClientNS.IGetBatchByIdResult);

        public GetBatchByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetBatchByIdResultInfo info)
            {
                return new GetBatchByIdResult(MapIGetBatchById_Node(info.Node, snapshot));
            }

            throw new global::System.ArgumentException("GetBatchByIdResultInfo expected.");
        }

        private global::BatchClientNS.IGetBatchById_Node? MapIGetBatchById_Node(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Batch", global::System.StringComparison.Ordinal))
            {
                return _getBatchById_Node_BatchFromBatchEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.BatchEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Display", global::System.StringComparison.Ordinal))
            {
                return _getBatchById_Node_DisplayFromDisplayEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.DisplayEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DisplayType", global::System.StringComparison.Ordinal))
            {
                return _getBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.DisplayTypeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BaseEntity", global::System.StringComparison.Ordinal))
            {
                return _getBatchById_Node_BaseEntityFromBaseEntityEntityMapper.Map(snapshot.GetEntity<global::BatchClientNS.State.BaseEntityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetBatchByIdResultInfo(global::StrawberryShake.EntityId? node, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Node = node;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::StrawberryShake.EntityId? Node { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetBatchByIdResultInfo(Node, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::BatchClientNS.IGetDisplayByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public GetDisplayByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetDisplayByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetDisplayByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? nodeId = default !;
            _entityStore.Update(session =>
            {
                nodeId = Update_IGetDisplayById_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetDisplayByIdResultInfo(nodeId, entityIds, snapshot.Version);
        }

        private global::StrawberryShake.EntityId? Update_IGetDisplayById_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Batch", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.BatchEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BatchEntity(entity.Id));
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BatchEntity(default !));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Display", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.DisplayEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DisplayType", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.DisplayTypeEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayTypeEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayTypeEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            if (entityId.Name.Equals("BaseEntity", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.BaseEntityEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BaseEntityEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BaseEntityEntity());
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::BatchClientNS.IGetBatchByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public GetBatchByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetBatchByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetBatchByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? nodeId = default !;
            _entityStore.Update(session =>
            {
                nodeId = Update_IGetBatchById_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetBatchByIdResultInfo(nodeId, entityIds, snapshot.Version);
        }

        private global::StrawberryShake.EntityId? Update_IGetBatchById_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Batch", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.BatchEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BatchEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BatchEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Display", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.DisplayEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DisplayType", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.DisplayTypeEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayTypeEntity(entity.Id));
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.DisplayTypeEntity(default !));
                }

                return entityId;
            }

            if (entityId.Name.Equals("BaseEntity", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::BatchClientNS.State.BaseEntityEntity? entity))
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BaseEntityEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::BatchClientNS.State.BaseEntityEntity());
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_BatchFromBatchEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, GetDisplayById_Node_Batch>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDisplayById_Node_BatchFromBatchEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDisplayById_Node_Batch Map(global::BatchClientNS.State.BatchEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDisplayById_Node_Batch();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_DisplayFromDisplayEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, GetDisplayById_Node_Display>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDisplayById_Node_DisplayFromDisplayEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDisplayById_Node_Display Map(global::BatchClientNS.State.DisplayEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDisplayById_Node_Display();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, GetDisplayById_Node_DisplayType>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDisplayById_Node_DisplayType Map(global::BatchClientNS.State.DisplayTypeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDisplayById_Node_DisplayType(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetDisplayById_Node_BaseEntityFromBaseEntityEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, GetDisplayById_Node_BaseEntity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDisplayById_Node_BaseEntityFromBaseEntityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDisplayById_Node_BaseEntity Map(global::BatchClientNS.State.BaseEntityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDisplayById_Node_BaseEntity();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_BatchFromBatchEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, GetBatchById_Node_Batch>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBatchById_Node_BatchFromBatchEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetBatchById_Node_Batch Map(global::BatchClientNS.State.BatchEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetBatchById_Node_Batch(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_DisplayFromDisplayEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, GetBatchById_Node_Display>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBatchById_Node_DisplayFromDisplayEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetBatchById_Node_Display Map(global::BatchClientNS.State.DisplayEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetBatchById_Node_Display();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, GetBatchById_Node_DisplayType>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetBatchById_Node_DisplayType Map(global::BatchClientNS.State.DisplayTypeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetBatchById_Node_DisplayType();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetBatchById_Node_BaseEntityFromBaseEntityEntityMapper : global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, GetBatchById_Node_BaseEntity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBatchById_Node_BaseEntityFromBaseEntityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetBatchById_Node_BaseEntity Map(global::BatchClientNS.State.BaseEntityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetBatchById_Node_BaseEntity();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class BatchClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Batch" => ParseBatchEntityId(obj, __typename),
                "Display" => ParseDisplayEntityId(obj, __typename),
                "DisplayType" => ParseDisplayTypeEntityId(obj, __typename),
                "BaseEntity" => ParseBaseEntityEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Batch" => FormatBatchEntityId(entityId),
                "Display" => FormatDisplayEntityId(entityId),
                "DisplayType" => FormatDisplayTypeEntityId(entityId),
                "BaseEntity" => FormatBaseEntityEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseBatchEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBatchEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDisplayEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDisplayEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDisplayTypeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDisplayTypeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBaseEntityEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBaseEntityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class BatchClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public BatchClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public static partial class BatchClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::BatchClientNS.State.BatchClientStoreAccessor> AddBatchClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::BatchClientNS.State.BatchClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.GetDisplayByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.GetBatchByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.BatchClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.IBatchClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::BatchClientNS.State.BatchClientStoreAccessor>("BatchClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("BatchClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, global::BatchClientNS.GetDisplayById_Node_Batch>, global::BatchClientNS.State.GetDisplayById_Node_BatchFromBatchEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, global::BatchClientNS.GetDisplayById_Node_Display>, global::BatchClientNS.State.GetDisplayById_Node_DisplayFromDisplayEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, global::BatchClientNS.GetDisplayById_Node_DisplayType>, global::BatchClientNS.State.GetDisplayById_Node_DisplayTypeFromDisplayTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, global::BatchClientNS.GetDisplayById_Node_BaseEntity>, global::BatchClientNS.State.GetDisplayById_Node_BaseEntityFromBaseEntityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BatchEntity, global::BatchClientNS.GetBatchById_Node_Batch>, global::BatchClientNS.State.GetBatchById_Node_BatchFromBatchEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayEntity, global::BatchClientNS.GetBatchById_Node_Display>, global::BatchClientNS.State.GetBatchById_Node_DisplayFromDisplayEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.DisplayTypeEntity, global::BatchClientNS.GetBatchById_Node_DisplayType>, global::BatchClientNS.State.GetBatchById_Node_DisplayTypeFromDisplayTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::BatchClientNS.State.BaseEntityEntity, global::BatchClientNS.GetBatchById_Node_BaseEntity>, global::BatchClientNS.State.GetBatchById_Node_BaseEntityFromBaseEntityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetDisplayByIdResult>, global::BatchClientNS.State.GetDisplayByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetDisplayByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.IGetDisplayByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BatchClientNS.IGetDisplayByIdResult>, global::BatchClientNS.State.GetDisplayByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BatchClientNS.IGetDisplayByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BatchClientNS.IGetDisplayByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BatchClientNS.IGetDisplayByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BatchClientNS.GetDisplayByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BatchClientNS.IGetDisplayByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.GetDisplayByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetBatchByIdResult>, global::BatchClientNS.State.GetBatchByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::BatchClientNS.IGetBatchByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.IGetBatchByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BatchClientNS.IGetBatchByIdResult>, global::BatchClientNS.State.GetBatchByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::BatchClientNS.IGetBatchByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::BatchClientNS.IGetBatchByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::BatchClientNS.IGetBatchByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BatchClientNS.GetBatchByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BatchClientNS.IGetBatchByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.GetBatchByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::BatchClientNS.State.BatchClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BatchClientNS.BatchClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::BatchClientNS.IBatchClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::BatchClientNS.BatchClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
