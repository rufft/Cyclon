// <auto-generated />
using System;
using Batch.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Batch.Migrations
{
    [DbContext(typeof(BatchDbContext))]
    [Migration("20250901105345_RefactorDbToSimpleDb")]
    partial class RefactorDbToSimpleDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Batch.Models.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cover")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayColor")
                        .HasColumnType("integer");

                    b.Property<Guid>("DisplayTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DisplayTypeId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Batch.Models.Displays.Display", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CroppedPhotoPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DisplayTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalPhotoPath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("DisplayTypeId");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("Batch.Models.Displays.DisplayType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AmountColumns")
                        .HasColumnType("integer");

                    b.Property<int>("AmountDisplays")
                        .HasColumnType("integer");

                    b.Property<int>("AmountRows")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CornersFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DisplayTypes");
                });

            modelBuilder.Entity("Batch.Models.Batch", b =>
                {
                    b.HasOne("Batch.Models.Displays.DisplayType", "DisplayType")
                        .WithMany("Batches")
                        .HasForeignKey("DisplayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DisplayType");
                });

            modelBuilder.Entity("Batch.Models.Displays.Display", b =>
                {
                    b.HasOne("Batch.Models.Batch", "Batch")
                        .WithMany("Displays")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Batch.Models.Displays.DisplayType", "DisplayType")
                        .WithMany("Displays")
                        .HasForeignKey("DisplayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Batch.Models.Displays.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("DisplayId")
                                .HasColumnType("uuid");

                            b1.Property<string>("X")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Y")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DisplayId");

                            b1.ToTable("Displays");

                            b1.WithOwner()
                                .HasForeignKey("DisplayId");
                        });

                    b.Navigation("Batch");

                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("DisplayType");
                });

            modelBuilder.Entity("Batch.Models.Displays.DisplayType", b =>
                {
                    b.OwnsOne("Batch.Models.Displays.Size", "Format", b1 =>
                        {
                            b1.Property<Guid>("DisplayTypeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision");

                            b1.HasKey("DisplayTypeId");

                            b1.ToTable("DisplayTypes");

                            b1.WithOwner()
                                .HasForeignKey("DisplayTypeId");
                        });

                    b.OwnsOne("Batch.Models.Displays.Size", "Resolution", b1 =>
                        {
                            b1.Property<Guid>("DisplayTypeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision");

                            b1.HasKey("DisplayTypeId");

                            b1.ToTable("DisplayTypes");

                            b1.WithOwner()
                                .HasForeignKey("DisplayTypeId");
                        });

                    b.OwnsOne("Batch.Models.Displays.Size", "ScreenSize", b1 =>
                        {
                            b1.Property<Guid>("DisplayTypeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision");

                            b1.HasKey("DisplayTypeId");

                            b1.ToTable("DisplayTypes");

                            b1.WithOwner()
                                .HasForeignKey("DisplayTypeId");
                        });

                    b.Navigation("Format")
                        .IsRequired();

                    b.Navigation("Resolution")
                        .IsRequired();

                    b.Navigation("ScreenSize")
                        .IsRequired();
                });

            modelBuilder.Entity("Batch.Models.Batch", b =>
                {
                    b.Navigation("Displays");
                });

            modelBuilder.Entity("Batch.Models.Displays.DisplayType", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Displays");
                });
#pragma warning restore 612, 618
        }
    }
}
